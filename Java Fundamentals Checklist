# Java Fundamentals Checklist

The following are several points of competency and skill that are intended to help identify areas of additional practice and study. Not all answers are found in the Codeup curriculum.

## Knowledge

### Java I

- [ ] I can explain how Java code runs: from being written to executing on an operation system.
--Programmer-writes code in .java file - input compiler -- output .class file - runs on JVM - runs on - OS

- [ ] I can explain the difference between a primitive type and a reference type in Java.
primitive types are the building blocks of the language...reference types refer to objects or arrays

- [ ] I can name several primitive types in Java.
-- byte, short, int, long, float, double, char, boolean...non-primitive Types Ex: string, array

- [ ] I can explain why multiple number primitive types are used.
--there are multiple number primitive types to allow java to be precise with memory control for a given task

- [ ] I can give an example of implicit and explicit casting.
--implicit casting is handled by the compiler...explicit is done by the programmer, used when converting a double to int or a base type to a derived type

- [ ] I can explain the difference between a runtime and compile-time error.
-- Compile-time errors refer to the error corresponding to syntax or semantics, they get detected by the compiler at the time of code development...Runtime errors refer to the error encountered during execution of code at runtime, these get detected when the jvm tries to run.

- [ ] I can identify the major editions of Java.
-- Java SE (Standard Edition) - Contains core functionality of the Java language, Provides facilities for networking, security, database, access, GUI dev,and XML parsing; Java EE (Enterprise Edition) - Facilities for building large-scale enterprise-level applications; Contains the Servlet, JSP, and JDBC libraries; JavaFX GUI applications; JavaME Java on mobile devices; Android

- [ ] I can define what a Java wrapper class is.
-- Wrapper classes provide a way to use primitive data types as objects(ex: Byte, Short, Integer, Long, Float, Double, Boolean, Character)

### Java II

- [ ] I can articulate what OOP is.
--object oriented programing...a computer programming model that organizes software design around data, or objects, rather than functions and logic. An object can be defined as a data field that has unique attributes and behavior.

- [ ] I can identify the four levels of visibility for a class/field/method and the identifiers used.
-- public (seen by class, Package, subclass, world), protected (seen by class, package, subclass), package-private (class, package), private (seen by class)

- [ ] I know what class of static methods is often used when working with arrays.
-- print an array, Create an arraylist from an array, check if an array contains a certain value, remove an array,

- [ ] I can explain the difference between static (class) fields/methods and instance fields/methods.
--static variables' values are associated with the class as a whole...instance variables hold values that are associated with an individual object

- [ ] I can explain the difference between method overloading and method overriding.
-- method overloading uses the same named method with different argument lists...method overriding is done so that a child class can give its own implementation to a method which is already provided by the parent class.

- [ ] I can identify the four pillars of object-oriented programming and give examples of each one.
--Encapsulation (), inheritance (), abstraction (), polymorphism ()


- [ ] I can describe the differences between interfaces and abstract classes and their use cases.
- [ ] I can generally describe what the Java Collections Framework is and specifically talk about the differences between a list, set, and map.
- [ ] I can explain the difference between a checked and unchecked exception.
- [ ] I can explain what a Java annotation is, why they are used, and give examples.
- [ ] I can explain the difference between the throws and throw keywords with regard to exceptions.

<P style="page-break-before: always">

## Skills

### Java I

- [ ] I can write a hello world Java program from scratch.

- [ ] I can write Java control statements (if, if/else, switch, ternary) and loops (while, do-while, for, for-each) from memory.
- [ ] I can write examples of the 8 Java primitive types.
- [ ] I can write examples of explicit casting and implicit casting.
- [ ] I can convert a numeric string to a number and a number to a numeric string.
- [ ] I can define a constant.
- [ ] I can write a program that takes in user input and returns an output to the user.
- [ ] I can compare two string values.
- [ ] I can write out a program comprised of multiple methods.
- [ ] I can get the length of string, trim it, get a portion of the string, create a new string replacing some portion of it.

### Java II

- [ ] I can write a class that contains both static and instance fields and methods, constructors, setters and getters.
- [ ] I can write a program composed of multiple classes requiring instantiation (not just using classes as groups of static methods).
- [ ] I can write my own reference type and fill instances of it in an ArrayList and HashMap and use it as a return and input type of a method.
- [ ] I can write an abstract class and a subclass that extends from the abstract class.
- [ ] I can write multiple interfaces and implement their methods in another class.
- [ ] I can create arrays of various data types and sizes with and without using an array initializer.
- [ ] I can get the length of an array, get a specific element or range of elements, create a new array replacing some portion of it, and iterate over an array of elements.
- [ ] I can do the above with an ArrayList.
- [ ] I can comfortably use the helper methods of both Arrays and Collections classes.
- [ ] I can write a program that throws a runtime exception.
- [ ] I can write an example of method overloading and method overriding.
- [ ] I can write a program that reads and writes to a file.
- [ ] I can write methods and collections that work with a parent class or interface type but use instances of objects that extend from these parent classes or implement these interfaces (Polymorphism).

